{"version":3,"file":"logService.js","sourceRoot":"/","sources":["src/common/logService.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2DAAoC;AACpC,2CAA6B;AAC7B,+BAAoC;AAGpC,MAAa,UAAU;IACrB;;;;;;;;;OASG;IAEI,MAAM,CAAC,IAAI,CAAC,OAAY,EAAE,GAAG,IAAS;QAC3C,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,eAAM,CAAC,IAAI,CAAC,OAAO,EAAE;gBACnB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;gBAChB,KAAK,EAAE,MAAM;gBACb,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;aACpB,CAAC,CAAC;SACJ;aAAM;YACL,eAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SACtB;IACH,CAAC;IAED;;;;;;;;;OASG;IAEI,MAAM,CAAC,KAAK,CAAC,OAAY,EAAE,GAAG,IAAS;QAC5C,IAAI,IAAI,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAC3B,MAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;YACtC,eAAM,CAAC,KAAK,CAAC,OAAO,EAAE;gBACpB,OAAO,EAAE,IAAI,CAAC,CAAC,CAAC;gBAChB,KAAK,EAAE,MAAM;gBACb,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;aACpB,CAAC,CAAC;SACJ;aAAM;YACL,eAAM,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;SACvB;IACH,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,gBAAgB,CAAC,GAAqB;QAClD,OAAO,SAAM,EAAE,CAAC;IAClB,CAAC;CACF;AA3DD,gCA2DC","sourcesContent":["import logger from \"./logger/index\";\r\nimport * as path from \"path\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport Express from \"express\";\r\n\r\nexport class LogService {\r\n  /**\r\n   * Log Info\r\n   *\r\n   * @static\r\n   * @param {string} message message\r\n   * @param {string} service? Service  name\r\n   * @param {string} classname? caller class name\r\n   * @param {string} methodname? call function name\r\n   * @memberof LogService\r\n   */\r\n\r\n  public static info(message: any, ...args: any) {\r\n    if (args && args.length > 1) {\r\n      const clname = path.basename(args[1]);\r\n      logger.info(message, {\r\n        service: args[0],\r\n        class: clname,\r\n        methodname: args[2],\r\n      });\r\n    } else {\r\n      logger.info(message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Log error\r\n   *\r\n   * @static\r\n   * @param {string} message message\r\n   * @param {string} service? Service  name\r\n   * @param {string} classname? caller class name\r\n   * @param {string} methodname? call function name\r\n   * @memberof LogService\r\n   */\r\n\r\n  public static error(message: any, ...args: any) {\r\n    if (args && args.length > 1) {\r\n      const clname = path.basename(args[1]);\r\n      logger.error(message, {\r\n        service: args[0],\r\n        class: clname,\r\n        methodname: args[2],\r\n      });\r\n    } else {\r\n      logger.error(message);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Returns Request id for each api invoke\r\n   *\r\n   * @static\r\n   * @returns {string}\r\n   * @memberof LogUtility\r\n   */\r\n  public static getRequestLogRef(req?: Express.Request): string {\r\n    return uuidv4();\r\n  }\r\n}\r\n"]}